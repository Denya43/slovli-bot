import json
import re
import time
from typing import List, Tuple

from telegram import Update
from telegram.ext import ContextTypes

from .config import ATTEMPTS, WORD_LEN, TOKEN, WORDS_FILE, ADMIN_USER_ID
from .db import (
    clear_game,
    finish_game_and_update_stats,
    get_chat_leaderboard,
    get_chat_stats,
    get_game,
    get_stats,
    init_db,
    record_chat_win,
    save_game,
    update_chat_stats,
    get_chat_settings,
    save_chat_settings,
    add_moderator,
    remove_moderator,
    get_moderators,
    is_moderator,
    is_admin_or_moderator,
    save_user_info,
    find_user_by_username,
    get_user_info,
)
from .game import (
    letters_aggregate,
    load_words,
    normalize_word,
    pick_answer,
    score_guess,
    get_words_for_length,
    add_word_to_file,
    remove_word_from_file,
)
from .render import reply_with_grid_image


WORDS_ALL: List[str] = []
ANSWER_POOL: List[str] = []
WORDS_BY_LENGTH: dict = {}
ANSWER_POOLS_BY_LENGTH: dict = {}

def set_word_lists(words_all: List[str], answer_pool: List[str]) -> None:
    global WORDS_ALL, ANSWER_POOL
    WORDS_ALL = words_all
    ANSWER_POOL = answer_pool

def set_words_by_length(words_by_length: dict, answer_pools_by_length: dict) -> None:
    global WORDS_BY_LENGTH, ANSWER_POOLS_BY_LENGTH
    WORDS_BY_LENGTH = words_by_length
    ANSWER_POOLS_BY_LENGTH = answer_pools_by_length


async def reload_word_dictionaries() -> None:
    """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ–≤–∞—Ä–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ words.txt"""
    global WORDS_BY_LENGTH, ANSWER_POOLS_BY_LENGTH
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –¥–ª—è –≤—Å–µ—Ö –¥–ª–∏–Ω –æ—Ç 4 –¥–æ 9
    words_by_length = {}
    answer_pools_by_length = {}
    
    for length in range(4, 10):
        try:
            words = load_words(WORDS_FILE, length, min_count=100)
            words_by_length[length] = words
            print(f"–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(words)} —Å–ª–æ–≤ –¥–ª–∏–Ω–æ–π {length}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤ –¥–ª–∏–Ω–æ–π {length}: {e}")
            words_by_length[length] = []
    
    # –°–æ–∑–¥–∞–µ–º –ø—É–ª—ã –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–ª–∏–Ω—ã
    for length in range(4, 10):
        if length in words_by_length and words_by_length[length]:
            answer_pools_by_length[length] = words_by_length[length]
        else:
            answer_pools_by_length[length] = []
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    WORDS_BY_LENGTH = words_by_length
    ANSWER_POOLS_BY_LENGTH = answer_pools_by_length


def display_name(update: Update) -> str:
    u = update.effective_user
    return (u.first_name or u.username or "–ò–≥—Ä–æ–∫")


def key_chat_id(update: Update) -> int:
    return update.effective_chat.id


def save_user_from_update(update: Update):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ Update"""
    user = update.effective_user
    if user:
        save_user_info(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )


def check_admin_permissions(user_id: int) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ_–æ–±_–æ—à–∏–±–∫–µ)"""
    if ADMIN_USER_ID == 0:
        return False, (
            "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ:\n"
            "SLOVLI_ADMIN_USER_ID=–≤–∞—à_id\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à ID, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @userinfobot"
        )
    
    if user_id != ADMIN_USER_ID:
        return False, (
            f"‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!\n\n"
            f"–í–∞—à ID: {user_id}\n"
            f"–ê–¥–º–∏–Ω ID: {ADMIN_USER_ID}\n\n"
            "–ï—Å–ª–∏ –≤—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª–µ .env"
        )
    
    return True, ""


def check_moderator_permissions(user_id: int) -> tuple[bool, str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ_–æ–±_–æ—à–∏–±–∫–µ)"""
    if ADMIN_USER_ID == 0:
        return False, (
            "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!\n\n"
            "–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –¥–æ–±–∞–≤—å—Ç–µ:\n"
            "SLOVLI_ADMIN_USER_ID=–≤–∞—à_id\n\n"
            "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à ID, –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É @userinfobot"
        )
    
    if not is_admin_or_moderator(user_id, ADMIN_USER_ID):
        role = "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user_id == ADMIN_USER_ID else ("–º–æ–¥–µ—Ä–∞—Ç–æ—Ä" if is_moderator(user_id) else "–æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        return False, (
            f"‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!\n\n"
            f"–í–∞—à ID: {user_id}\n"
            f"–í–∞—à–∞ —Ä–æ–ª—å: {role}\n\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."
        )
    
    return True, ""


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    save_user_from_update(update)
    
    chat_id = key_chat_id(update)
    settings = get_chat_settings(chat_id)
    word_length = settings["word_length"] if settings else 5
    
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ ¬´–°–ª–æ–≤–ª–∏¬ª ‚Äî —É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ –∏–∑ {word_length} –±—É–∫–≤ –∑–∞ {ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫.\n"
        "–û–¥–Ω–∞ –∏–≥—Ä–∞ –Ω–∞ —á–∞—Ç. –ö–æ–º–∞–Ω–¥—ã: /new, /giveup, /stats, /help"
    )


async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    save_user_from_update(update)
    
    chat_id = key_chat_id(update)
    settings = get_chat_settings(chat_id)
    word_length = settings["word_length"] if settings else 5
    
    help_text = (
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "üü© ‚Äî –±—É–∫–≤–∞ –Ω–∞ —Å–≤–æ—ë–º –º–µ—Å—Ç–µ\n"
        "üü® ‚Äî –±—É–∫–≤–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ –Ω–∞ –º–µ—Å—Ç–µ\n"
        "‚¨õ ‚Äî –±—É–∫–≤—ã –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ\n\n"
        f"–ü–∏—à–∏ —Å–ª–æ–≤–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π, —Ä–æ–≤–Ω–æ {word_length} –±—É–∫–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/new ‚Äî –Ω–æ–≤–∞—è –∏–≥—Ä–∞\n"
        "/giveup ‚Äî —Å–¥–∞—Ç—å—Å—è\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "/length [—á–∏—Å–ª–æ] ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏–Ω—É —Å–ª–æ–≤–∞ (4-9)\n"
        "/checkword [—Å–ª–æ–≤–æ] ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ\n"
        "/help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
    )
    
    user_id = update.effective_user.id
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if is_admin_or_moderator(user_id, ADMIN_USER_ID):
        help_text += "\n\n–ö–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞:\n"
        help_text += "/addword <—Å–ª–æ–≤–æ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n"
        help_text += "/removeword <—Å–ª–æ–≤–æ> ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ\n"
        help_text += "/words [–¥–ª–∏–Ω–∞] ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–≤\n"
        help_text += "/myrole ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id == ADMIN_USER_ID:
        help_text += "\n\n–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n"
        help_text += "/addmoderator <ID –∏–ª–∏ @username> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
        help_text += "/removemoderator <ID –∏–ª–∏ @username> ‚Äî —É–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞\n"
        help_text += "/moderators ‚Äî —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤"
    
    await update.message.reply_text(help_text)


async def cmd_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = key_chat_id(update)
    g = get_game(chat_id)
    if g and g["status"] == "IN_PROGRESS":
        clear_game(chat_id)
        await update.message.reply_text(f"–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–≤–µ—Ç –±—ã–ª: {g['answer']}")

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞
    settings = get_chat_settings(chat_id)
    word_length = settings["word_length"] if settings else 5
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–ª —Å–ª–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
        pool = ANSWER_POOLS_BY_LENGTH.get(word_length, [])
        if not pool:
            await update.message.reply_text(f"–ù–µ—Ç —Å–ª–æ–≤ –¥–ª–∏–Ω–æ–π {word_length} –±—É–∫–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ.")
            return
        
        # –ü—É–ª —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Å–ª–æ–≤–∞ –∏–∑ —Ñ–∞–π–ª–∞ (–≤–∫–ª—é—á–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ /addword)
        
        if not pool:
            await update.message.reply_text(f"–ù–µ—Ç —Å–ª–æ–≤ –¥–ª–∏–Ω–æ–π {word_length} –±—É–∫–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ.")
            return
        
        answer = pick_answer(pool, word_length)
        print(f"[DEBUG] –ó–∞–≥–∞–¥–∞–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {answer} (–¥–ª–∏–Ω–∞: {word_length})")
        save_game(chat_id, answer, [], "IN_PROGRESS", word_length)
        await update.message.reply_text(
            f"–ü–æ–µ—Ö–∞–ª–∏! –ó–∞–≥–∞–¥–∞–Ω–æ —Å–ª–æ–≤–æ –∏–∑ {word_length} –±—É–∫–≤. –£ –≤–∞—Å {ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫."
        )
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")


async def cmd_giveup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = key_chat_id(update)
    g = get_game(chat_id)
    if not g or g["status"] != "IN_PROGRESS":
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∏–≥—Ä—ã. /new ‚Äî –Ω–∞—á–∞—Ç—å.")
        return
    answer = g["answer"]
    clear_game(chat_id)
    await update.message.reply_text(f"–°–¥–∞—ë–º—Å—è. –û—Ç–≤–µ—Ç –±—ã–ª: {answer}\n/new ‚Äî –Ω–æ–≤–∞—è –∏–≥—Ä–∞")


async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    st = get_stats(user_id)
    if not st or st["played"] == 0:
        await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –°—ã–≥—Ä–∞–π /new!")
        return
    winrate = round(100 * st["wins"] / st["played"])
    await update.message.reply_text(
        f"–°—ã–≥—Ä–∞–Ω–æ: {st['played']}\n"
        f"–ü–æ–±–µ–¥: {st['wins']} ({winrate}%)\n"
        f"–°–µ—Ä–∏—è: {st['current_streak']}, —Ä–µ–∫–æ—Ä–¥: {st['max_streak']}"
    )


async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    save_user_from_update(update)
    
    msg = update.message.text
    chat_id = key_chat_id(update)
    user_id = update.effective_user.id
    name = display_name(update)

    g = get_game(chat_id)
    if not g or g["status"] != "IN_PROGRESS":
        return

    tokens = re.findall(r"[–ê-–Ø–Å–∞-—è—ë]+", msg)
    if len(tokens) != 1:
        return

    guess = normalize_word(tokens[0])
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª–∏–Ω—ã —Å–ª–æ–≤–∞
    settings = get_chat_settings(chat_id)
    word_length = settings["word_length"] if settings else 5
    
    if len(guess) != word_length:
        await update.message.reply_text(f"–ù—É–∂–Ω–æ —Å–ª–æ–≤–æ –∏–∑ {word_length} –±—É–∫–≤.")
        return
    if not re.fullmatch(r"[–ê-–Ø]{" + str(word_length) + "}", guess):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ –¥–ª—è –¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
    words_for_length = get_words_for_length(word_length, WORDS_BY_LENGTH.get(word_length, []))
    if guess not in words_for_length:
        await update.message.reply_text("–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ.")
        return

    answer = g["answer"]
    attempts = json.loads(g["attempts_json"])  # —Å–ø–∏—Å–æ–∫: [guess, marks, user_id]

    # –ó–∞–ø—Ä–µ—Ç–∏–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Ç–µ–º –∂–µ —Å–ª–æ–≤–æ–º –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –∏–≥—Ä—ã (–¥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ö–æ–¥–∞)
    previous_guesses = {a[0] for a in attempts}
    if guess in previous_guesses:
        await update.message.reply_text("–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
        return

    marks = score_guess(guess, answer)
    attempts.append([guess, marks, user_id])

    if guess == answer:
        finish_game_and_update_stats(user_id, True, len(attempts))
        update_chat_stats(chat_id, True, len(attempts))
        record_chat_win(chat_id, user_id, name)
        clear_game(chat_id)
        await reply_with_grid_image(update, [(a[0], a[1]) for a in attempts], word_length)
        st = get_chat_stats(chat_id)
        if st and st["played"]:
            winrate = round(100 * st["wins"] / st["played"])
            leaderboard = get_chat_leaderboard(chat_id, limit=10)
            lb_text = "\n".join(
                f"{i+1}. {row['name'] or row['user_id']}: {row['wins']}"
                for i, row in enumerate(leaderboard)
            ) or "–Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"
            await update.message.reply_text(
                f"{guess} ‚Äî {name}\n–ü–æ–±–µ–¥–∞ –∑–∞ {len(attempts)} –ø–æ–ø—ã—Ç–æ–∫! üéâ\n\n"
                f"–°—ã–≥—Ä–∞–Ω–æ –≤ —á–∞—Ç–µ: {st['played']}\n"
                f"–ü–æ–±–µ–¥ —á–∞—Ç–∞: {st['wins']} ({winrate}%)\n"
                f"–°–µ—Ä–∏—è: {st['current_streak']}, —Ä–µ–∫–æ—Ä–¥: {st['max_streak']}\n\n"
                f"–¢–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n{lb_text}\n/new"
            )
        else:
            leaderboard = get_chat_leaderboard(chat_id, limit=10)
            lb_text = "\n".join(
                f"{i+1}. {row['name'] or row['user_id']}: {row['wins']}"
                for i, row in enumerate(leaderboard)
            ) or "–Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"
            await update.message.reply_text(
                f"{guess} ‚Äî {name}\n–ü–æ–±–µ–¥–∞ –∑–∞ {len(attempts)} –ø–æ–ø—ã—Ç–æ–∫! üéâ\n\n"
                f"–¢–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n{lb_text}\n/new"
            )
        return

    if len(attempts) >= ATTEMPTS:
        update_chat_stats(chat_id, False, None)
        clear_game(chat_id)
        await reply_with_grid_image(update, [(a[0], a[1]) for a in attempts], word_length)
        st = get_chat_stats(chat_id)
        if st and st["played"]:
            winrate = round(100 * st["wins"] / st["played"])
            await update.message.reply_text(
                f"{guess} ‚Äî {name}\n–ù–µ –≤—ã—à–ª–æ. –û—Ç–≤–µ—Ç –±—ã–ª: {answer}\n\n"
                f"–°—ã–≥—Ä–∞–Ω–æ –≤ —á–∞—Ç–µ: {st['played']}\n"
                f"–ü–æ–±–µ–¥ —á–∞—Ç–∞: {st['wins']} ({winrate}%)\n"
                f"–°–µ—Ä–∏—è: {st['current_streak']}, —Ä–µ–∫–æ—Ä–¥: {st['max_streak']}\n/new"
            )
        else:
            await update.message.reply_text(
                f"{guess} ‚Äî {name}\n–ù–µ –≤—ã—à–ª–æ. –û—Ç–≤–µ—Ç –±—ã–ª: {answer}\n/new"
            )
        return

    save_game(chat_id, answer, attempts, "IN_PROGRESS")
    left = ATTEMPTS - len(attempts)
    await reply_with_grid_image(update, [(a[0], a[1]) for a in attempts], word_length)
    await update.message.reply_text(
        f"{guess} ‚Äî {name}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {left}"
    )


def bootstrap_words() -> Tuple[List[str], List[str]]:
    all_words = load_words(WORDS_FILE, WORD_LEN, min_count=1000)
    pool = load_words(WORDS_FILE, WORD_LEN, min_count=1)
    inter = sorted(set(pool) & set(all_words))
    if not inter:
        raise RuntimeError("ANSWER_POOL –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å WORDS_ALL")
    return all_words, inter


async def cmd_length(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏–Ω—É —Å–ª–æ–≤–∞ –¥–ª—è —á–∞—Ç–∞"""
    chat_id = key_chat_id(update)
    
    if not context.args:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–ª–∏–Ω—É
        settings = get_chat_settings(chat_id)
        current_length = settings["word_length"] if settings else 5
        await update.message.reply_text(
            f"–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞: {current_length} –±—É–∫–≤\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /length <—á–∏—Å–ª–æ> –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è (4-9 –±—É–∫–≤)"
        )
        return
    
    try:
        length = int(context.args[0])
        if length < 4 or length > 9:
            await update.message.reply_text("–î–ª–∏–Ω–∞ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 4 –¥–æ 9 –±—É–∫–≤.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–∞ —Ç–∞–∫–æ–π –¥–ª–∏–Ω—ã
        if length not in WORDS_BY_LENGTH or not WORDS_BY_LENGTH[length]:
            await update.message.reply_text(f"–ù–µ—Ç —Å–ª–æ–≤ –¥–ª–∏–Ω–æ–π {length} –±—É–∫–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ.")
            return
        
        save_chat_settings(chat_id, length)
        await update.message.reply_text(f"–î–ª–∏–Ω–∞ —Å–ª–æ–≤–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {length} –±—É–∫–≤")
        
    except ValueError:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 4 –¥–æ 9.")


async def cmd_addword(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä—å"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    allowed, error_message = check_moderator_permissions(user_id)
    if not allowed:
        await update.message.reply_text(error_message)
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addword <—Å–ª–æ–≤–æ>")
        return
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ —Å–ª–æ–≤–æ
    word_input = " ".join(context.args)
    word = normalize_word(word_input)
    
    if len(word) < 4 or len(word) > 9:
        await update.message.reply_text("–î–ª–∏–Ω–∞ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 4 –¥–æ 9 –±—É–∫–≤.")
        return
    
    if not re.fullmatch(r"[–ê-–Ø]{"+str(len(word))+"}", word):
        await update.message.reply_text("–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã.")
        return
    
    if add_word_to_file(word, WORDS_FILE):
        await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å ({len(word)} –±—É–∫–≤)")
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –≤—Å–µ—Ö –¥–ª–∏–Ω
        await reload_word_dictionaries()
    else:
        await update.message.reply_text(f"‚ùå –°–ª–æ–≤–æ '{word}' —É–∂–µ –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ")


async def cmd_removeword(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    allowed, error_message = check_moderator_permissions(user_id)
    if not allowed:
        await update.message.reply_text(error_message)
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeword <—Å–ª–æ–≤–æ>")
        return
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ —Å–ª–æ–≤–æ
    word_input = " ".join(context.args)
    word = normalize_word(word_input)
    
    if len(word) < 4 or len(word) > 9:
        await update.message.reply_text("–î–ª–∏–Ω–∞ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 4 –¥–æ 9 –±—É–∫–≤.")
        return
    
    if not re.fullmatch(r"[–ê-–Ø]{"+str(len(word))+"}", word):
        await update.message.reply_text("–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã.")
        return
    
    if remove_word_from_file(word, WORDS_FILE):
        await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è")
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è –≤—Å–µ—Ö –¥–ª–∏–Ω
        await reload_word_dictionaries()
    else:
        await update.message.reply_text(f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ")


async def cmd_checkword(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Å–ª–æ–≤–æ –≤ —Å–ª–æ–≤–∞—Ä–µ"""
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /checkword <—Å–ª–æ–≤–æ>")
        return
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–Ω–æ —Å–ª–æ–≤–æ
    word_input = " ".join(context.args)
    word = normalize_word(word_input)
    
    if len(word) < 4 or len(word) > 9:
        await update.message.reply_text("–î–ª–∏–Ω–∞ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 4 –¥–æ 9 –±—É–∫–≤.")
        return
    
    if not re.fullmatch(r"[–ê-–Ø]{"+str(len(word))+"}", word):
        await update.message.reply_text("–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ –±—É–∫–≤—ã.")
        return
    
    length = len(word)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ —Å–ª–æ–≤–∞—Ä–µ
    words = WORDS_BY_LENGTH.get(length, [])
    in_dictionary = word in words
    
    if in_dictionary:
        await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{word}' –µ—Å—Ç—å –≤ —Å–ª–æ–≤–∞—Ä–µ")
    else:
        await update.message.reply_text(f"‚ùå –°–ª–æ–≤–æ '{word}' –ù–ï–¢ –≤ —Å–ª–æ–≤–∞—Ä–µ")


async def cmd_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–ª–æ–≤"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    allowed, error_message = check_moderator_permissions(user_id)
    if not allowed:
        await update.message.reply_text(error_message)
        return
    
    if not context.args:
        # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = []
        for length in range(4, 10):
            word_count = len(WORDS_BY_LENGTH.get(length, []))
            if word_count > 0:
                stats.append(f"{length} –±—É–∫–≤: {word_count} —Å–ª–æ–≤")
        
        await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–ª–æ–≤:\n" + "\n".join(stats))
        return
    
    try:
        length = int(context.args[0])
        if length < 4 or length > 9:
            await update.message.reply_text("–î–ª–∏–Ω–∞ —Å–ª–æ–≤–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 4 –¥–æ 9 –±—É–∫–≤.")
            return
        
        words = WORDS_BY_LENGTH.get(length, [])
        
        msg = f"–°–ª–æ–≤–∞ –¥–ª–∏–Ω–æ–π {length} –±—É–∫–≤: {len(words)}"
        
        if words and len(words) <= 50:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–ª–æ–≤–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ –º–Ω–æ–≥–æ
            msg += f"\n\n–í—Å–µ —Å–ª–æ–≤–∞:\n{', '.join(words[:50])}"
        elif words:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 20
            msg += f"\n\n–ü–µ—Ä–≤—ã–µ 20 —Å–ª–æ–≤:\n{', '.join(words[:20])}"
            msg += f"\n... –∏ –µ—â–µ {len(words) - 20}"
        
        await update.message.reply_text(msg)
        
    except ValueError:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏–Ω—É —Å–ª–æ–≤–∞.")


async def cmd_addmoderator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    save_user_from_update(update)
    
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)
    allowed, error_message = check_admin_permissions(user_id)
    if not allowed:
        await update.message.reply_text(error_message)
        return
    
    if not context.args:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addmoderator <user_id –∏–ª–∏ @username>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "/addmoderator 123456789\n"
            "/addmoderator @username\n"
            "/addmoderator username\n\n"
            "üí° –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–æ username, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω —Ö–æ—Ç—è –±—ã —Ä–∞–∑ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É"
        )
        return
    
    arg = context.args[0]
    
    # –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ - ID –∏–ª–∏ username
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ - –∑–Ω–∞—á–∏—Ç ID
        moderator_id = int(arg)
        user_info = get_user_info(moderator_id)
        username = user_info['username'] if user_info else ""
        
    except ValueError:
        # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ - –∑–Ω–∞—á–∏—Ç username
        username = arg.lstrip('@')  # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        user_info = find_user_by_username(username)
        
        if not user_info:
            await update.message.reply_text(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω!\n\n"
                "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—Å–∞–ª –±–æ—Ç—É\n"
                "‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username\n\n"
                "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É, –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É."
            )
            return
            
        moderator_id = user_info['user_id']
        username = user_info['username']
    
    if moderator_id == ADMIN_USER_ID:
        await update.message.reply_text("‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")
        return
    
    if add_moderator(moderator_id, username, user_id):
        display_name = f"@{username}" if username else str(moderator_id)
        await update.message.reply_text(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} (ID: {moderator_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã"
        )
    else:
        display_name = f"@{username}" if username else str(moderator_id)
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")


async def cmd_removemoderator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    save_user_from_update(update)
    
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)
    allowed, error_message = check_admin_permissions(user_id)
    if not allowed:
        await update.message.reply_text(error_message)
        return
    
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removemoderator <user_id –∏–ª–∏ @username>")
        return
    
    arg = context.args[0]
    
    # –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–æ - ID –∏–ª–∏ username
    try:
        # –ï—Å–ª–∏ —ç—Ç–æ —á–∏—Å–ª–æ - –∑–Ω–∞—á–∏—Ç ID
        moderator_id = int(arg)
        user_info = get_user_info(moderator_id)
        username = user_info['username'] if user_info else ""
        
    except ValueError:
        # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ - –∑–Ω–∞—á–∏—Ç username
        username = arg.lstrip('@')  # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –µ—Å—Ç—å
        user_info = find_user_by_username(username)
        
        if not user_info:
            await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        moderator_id = user_info['user_id']
        username = user_info['username']
    
    if remove_moderator(moderator_id):
        display_name = f"@{username}" if username else str(moderator_id)
        await update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} (ID: {moderator_id}) —É–¥–∞–ª–µ–Ω –∏–∑ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤")
    else:
        display_name = f"@{username}" if username else str(moderator_id)
        await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {display_name} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º")


async def cmd_moderators(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)"""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤)
    allowed, error_message = check_admin_permissions(user_id)
    if not allowed:
        await update.message.reply_text(error_message)
        return
    
    moderators = get_moderators()
    
    if not moderators:
        await update.message.reply_text("üìù –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
        return
    
    msg = "üë• –°–ø–∏—Å–æ–∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    for mod in moderators:
        username_part = f" ({mod['username']})" if mod['username'] else ""
        added_at = time.strftime("%Y-%m-%d %H:%M", time.localtime(mod['added_at']))
        msg += f"‚Ä¢ {mod['user_id']}{username_part}\n  –î–æ–±–∞–≤–ª–µ–Ω: {added_at}\n\n"
    
    await update.message.reply_text(msg)


async def cmd_myrole(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ—é —Ä–æ–ª—å"""
    user_id = update.effective_user.id
    
    if user_id == ADMIN_USER_ID:
        role = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
    elif is_moderator(user_id):
        role = "üõ°Ô∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä"
    else:
        role = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    await update.message.reply_text(
        f"–í–∞—à ID: {user_id}\n"
        f"–í–∞—à–∞ —Ä–æ–ª—å: {role}"
    )



