import json
import re
from typing import List, Tuple

from telegram import Update
from telegram.ext import ContextTypes

from .config import ATTEMPTS, WORD_LEN, TOKEN, WORDS_FILE, POOL_FILE
from .db import (
    clear_game,
    finish_game_and_update_stats,
    get_chat_leaderboard,
    get_chat_stats,
    get_game,
    get_stats,
    init_db,
    record_chat_win,
    save_game,
    update_chat_stats,
)
from .game import (
    letters_aggregate,
    load_words,
    normalize_word,
    pick_answer,
    score_guess,
)
from .render import reply_with_grid_image


WORDS_ALL: List[str] = []
ANSWER_POOL: List[str] = []


def display_name(update: Update) -> str:
    u = update.effective_user
    return (u.first_name or u.username or "–ò–≥—Ä–æ–∫")


def key_chat_id(update: Update) -> int:
    return update.effective_chat.id


async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ ¬´–°–ª–æ–≤–ª–∏¬ª ‚Äî —É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ –∏–∑ {WORD_LEN} –±—É–∫–≤ –∑–∞ {ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫.\n"
        "–û–¥–Ω–∞ –∏–≥—Ä–∞ –Ω–∞ —á–∞—Ç. –ö–æ–º–∞–Ω–¥—ã: /new, /giveup, /stats, /help"
    )


async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∞–≤–∏–ª–∞:\n"
        "üü© ‚Äî –±—É–∫–≤–∞ –Ω–∞ —Å–≤–æ—ë–º –º–µ—Å—Ç–µ\n"
        "üü® ‚Äî –±—É–∫–≤–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ –Ω–∞ –º–µ—Å—Ç–µ\n"
        "‚¨õ ‚Äî –±—É–∫–≤—ã –Ω–µ—Ç –≤ —Å–ª–æ–≤–µ\n\n"
        "–ü–∏—à–∏ —Å–ª–æ–≤–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π, —Ä–æ–≤–Ω–æ 5 –±—É–∫–≤."
    )


async def cmd_new(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = key_chat_id(update)
    g = get_game(chat_id)
    if g and g["status"] == "IN_PROGRESS":
        clear_game(chat_id)
        await update.message.reply_text(f"–ü—Ä–µ–¥—ã–¥—É—â–∞—è –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–≤–µ—Ç –±—ã–ª: {g['answer']}")

    answer = pick_answer(ANSWER_POOL)
    save_game(chat_id, answer, [], "IN_PROGRESS")
    await update.message.reply_text(
        f"–ü–æ–µ—Ö–∞–ª–∏! –ó–∞–≥–∞–¥–∞–Ω–æ —Å–ª–æ–≤–æ –∏–∑ {WORD_LEN} –±—É–∫–≤. –£ –≤–∞—Å {ATTEMPTS} –ø–æ–ø—ã—Ç–æ–∫."
    )


async def cmd_giveup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = key_chat_id(update)
    g = get_game(chat_id)
    if not g or g["status"] != "IN_PROGRESS":
        await update.message.reply_text("–°–µ–π—á–∞—Å –Ω–µ—Ç –∏–≥—Ä—ã. /new ‚Äî –Ω–∞—á–∞—Ç—å.")
        return
    answer = g["answer"]
    clear_game(chat_id)
    await update.message.reply_text(f"–°–¥–∞—ë–º—Å—è. –û—Ç–≤–µ—Ç –±—ã–ª: {answer}\n/new ‚Äî –Ω–æ–≤–∞—è –∏–≥—Ä–∞")


async def cmd_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    st = get_stats(user_id)
    if not st or st["played"] == 0:
        await update.message.reply_text("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É—Å—Ç–∞. –°—ã–≥—Ä–∞–π /new!")
        return
    winrate = round(100 * st["wins"] / st["played"])
    dist_text = "\n".join(
        f"{i}: {'‚ñá' * min(st[f'dist{i}'],20)} {st[f'dist{i}']}" for i in range(1, 7)
    )
    await update.message.reply_text(
        f"–°—ã–≥—Ä–∞–Ω–æ: {st['played']}\n"
        f"–ü–æ–±–µ–¥: {st['wins']} ({winrate}%)\n"
        f"–°–µ—Ä–∏—è: {st['current_streak']}, —Ä–µ–∫–æ—Ä–¥: {st['max_streak']}\n\n"
        f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫:\n{dist_text}"
    )


async def on_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text
    chat_id = key_chat_id(update)
    user_id = update.effective_user.id
    name = display_name(update)

    g = get_game(chat_id)
    if not g or g["status"] != "IN_PROGRESS":
        return

    tokens = re.findall(r"[–ê-–Ø–Å–∞-—è—ë]+", msg)
    if len(tokens) != 1:
        return

    guess = normalize_word(tokens[0])

    if len(guess) != WORD_LEN:
        await update.message.reply_text(f"–ù—É–∂–Ω–æ —Å–ª–æ–≤–æ –∏–∑ {WORD_LEN} –±—É–∫–≤.")
        return
    if not re.fullmatch(r"[–ê-–Ø]{" + str(WORD_LEN) + "}", guess):
        await update.message.reply_text("–¢–æ–ª—å–∫–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    if guess not in WORDS_ALL:
        await update.message.reply_text("–¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ.")
        return

    answer = g["answer"]
    attempts = json.loads(g["attempts_json"])

    marks = score_guess(guess, answer)
    attempts.append([guess, marks, user_id])

    # –ó–∞–ø—Ä–µ—Ç–∏–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —Ç–µ–º –∂–µ —Å–ª–æ–≤–æ–º –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–π –∏–≥—Ä—ã
    previous_guesses = {a[0] for a in attempts}
    if guess in previous_guesses:
        await update.message.reply_text("–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –ø—Ä–æ–±–æ–≤–∞–ª–∏ –≤ —ç—Ç–æ–π –∏–≥—Ä–µ.")
        return

    if guess == answer:
        finish_game_and_update_stats(user_id, True, len(attempts))
        update_chat_stats(chat_id, True, len(attempts))
        record_chat_win(chat_id, user_id, name)
        clear_game(chat_id)
        await reply_with_grid_image(update, [(a[0], a[1]) for a in attempts])
        st = get_chat_stats(chat_id)
        if st and st["played"]:
            winrate = round(100 * st["wins"] / st["played"])
            dist_text = "\n".join(
                f"{i}: {'‚ñá' * min(st[f'dist{i}'],20)} {st[f'dist{i}']}" for i in range(1, 7)
            )
            leaderboard = get_chat_leaderboard(chat_id, limit=10)
            lb_text = "\n".join(
                f"{i+1}. {row['name'] or row['user_id']}: {row['wins']}"
                for i, row in enumerate(leaderboard)
            ) or "–Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"
            await update.message.reply_text(
                f"{guess} ‚Äî {name}\n–ü–æ–±–µ–¥–∞ –∑–∞ {len(attempts)} –ø–æ–ø—ã—Ç–æ–∫! üéâ\n\n"
                f"–°—ã–≥—Ä–∞–Ω–æ –≤ —á–∞—Ç–µ: {st['played']}\n"
                f"–ü–æ–±–µ–¥ —á–∞—Ç–∞: {st['wins']} ({winrate}%)\n"
                f"–°–µ—Ä–∏—è: {st['current_streak']}, —Ä–µ–∫–æ—Ä–¥: {st['max_streak']}\n\n"
                f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫:\n{dist_text}\n\n"
                f"–¢–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n{lb_text}\n/new"
            )
        else:
            leaderboard = get_chat_leaderboard(chat_id, limit=10)
            lb_text = "\n".join(
                f"{i+1}. {row['name'] or row['user_id']}: {row['wins']}"
                for i, row in enumerate(leaderboard)
            ) or "–Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π"
            await update.message.reply_text(
                f"{guess} ‚Äî {name}\n–ü–æ–±–µ–¥–∞ –∑–∞ {len(attempts)} –ø–æ–ø—ã—Ç–æ–∫! üéâ\n\n"
                f"–¢–æ–ø –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π:\n{lb_text}\n/new"
            )
        return

    if len(attempts) >= ATTEMPTS:
        update_chat_stats(chat_id, False, None)
        clear_game(chat_id)
        await reply_with_grid_image(update, [(a[0], a[1]) for a in attempts])
        st = get_chat_stats(chat_id)
        if st and st["played"]:
            winrate = round(100 * st["wins"] / st["played"])
            dist_text = "\n".join(
                f"{i}: {'‚ñá' * min(st[f'dist{i}'],20)} {st[f'dist{i}']}" for i in range(1, 7)
            )
            await update.message.reply_text(
                f"{guess} ‚Äî {name}\n–ù–µ –≤—ã—à–ª–æ. –û—Ç–≤–µ—Ç –±—ã–ª: {answer}\n\n"
                f"–°—ã–≥—Ä–∞–Ω–æ –≤ —á–∞—Ç–µ: {st['played']}\n"
                f"–ü–æ–±–µ–¥ —á–∞—Ç–∞: {st['wins']} ({winrate}%)\n"
                f"–°–µ—Ä–∏—è: {st['current_streak']}, —Ä–µ–∫–æ—Ä–¥: {st['max_streak']}\n\n"
                f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫:\n{dist_text}\n/new"
            )
        else:
            await update.message.reply_text(
                f"{guess} ‚Äî {name}\n–ù–µ –≤—ã—à–ª–æ. –û—Ç–≤–µ—Ç –±—ã–ª: {answer}\n/new"
            )
        return

    save_game(chat_id, answer, attempts, "IN_PROGRESS")
    left = ATTEMPTS - len(attempts)
    await reply_with_grid_image(update, [(a[0], a[1]) for a in attempts])
    await update.message.reply_text(
        f"{guess} ‚Äî {name}\n–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {left}"
    )


def bootstrap_words() -> Tuple[List[str], List[str]]:
    all_words = load_words(WORDS_FILE, WORD_LEN, min_count=1000)
    pool = load_words(POOL_FILE, WORD_LEN, min_count=1)
    inter = sorted(set(pool) & set(all_words))
    if not inter:
        raise RuntimeError("ANSWER_POOL –Ω–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å WORDS_ALL")
    return all_words, inter



